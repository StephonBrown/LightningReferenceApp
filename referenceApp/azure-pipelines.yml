trigger:
  batch: true
  branches:
    include:
    - "*"

variables:
  apiBuildVMImage: 'windows-latest'
  apiSolutionRoot: '$(System.DefaultWorkingDirectory)\referenceApp\api'
  apiSolution: '$(apiSolutionRoot)\referenceApi.sln'
  apiProject: '$(apiSolutionRoot)\src\referenceApp.Api\referenceApp.Api.csproj'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: BuildAndTestApi
  displayName: 'Build and Test API'
  dependsOn: []
  
  jobs:
  - job: BuildAndRunAPIUnitTests
    displayName: "Build and Test API"
    dependsOn: []

    pool:
      vmImage: $(apiBuildVmImage)
  
    steps:
    - checkout: self
      submodules: true
  
    - task: CmdLine@2
      displayName: 'Dump Environment Variables'
      inputs:
        script: 'printenv'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore $(apiSolution)'
      inputs:
        command: 'restore'
        projects: '$(apiSolution)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build $(apiSolution) --configuration $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '$(apiSolution)'
        arguments: '-- configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Run ALL Tests and Collect Code Coverage"
      inputs:
        command: 'test'
        projects: '$(apiSolutionRoot)\**\*Tests\*.csproj'
        arguments: '--verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Install Custom Tool: ReportGenerator Tool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

    - task: CmdLine@2
      displayName: 'Create Reports'
      inputs:
        script: 'reportgenerator -reports:$(apiSolutionRoot)\**\coverage.cobertura.xml -targetdir:$(apiSolutionRoot)\CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges" -sourcedir:$(apiSolutionRoot)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish API Code Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(apiSolutionRoot)\**\coverage.cobertura.xml'
        reportDirectory: '$(apiSolutionRoot)\CoverageReport'
    
    - task: DotNetCoreCLI@2
      displayName: 'Stage API Build Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(apiProject)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)\api'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Artifacts: api-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'api-drop'
        publishLocation: 'pipeline'



# steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
