trigger:
  batch: true
  branches:
    include:
    - "*"

variables:
  # ***** API Project Build Params *****
  apiBuildVMImage: 'windows-latest'
  apiSolutionRoot: '$(System.DefaultWorkingDirectory)\referenceApp\api'
  apiSolution: '$(apiSolutionRoot)\referenceApi.sln'
  apiProject: '$(apiSolutionRoot)\src\referenceApp.Api\referenceApp.Api.csproj'
  # ***** END API PROJECT BUILD PARAMS *****

  # ***** WEBAPP Project Build Params *****
  webappBuildVMImage: 'ubuntu-latest'
  webAppSolutionRoot: '$(System.DefaultWorkingDirectory)/referenceApp/webapp'
  webAppBuildDestination: '$(System.DefaultWorkingDirectory)/referenceApp/webapp/build'
  # ***** END WEBAPP PROJECT BUILD PARAMS *****



  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: BuildTestStageApi
  displayName: 'API: Build, Test and Stage'
  dependsOn: []
  
  jobs:
  - job: BuildAndRunAPIUnitTests
    displayName: "Build and Test API"
    dependsOn: []

    pool:
      vmImage: $(apiBuildVmImage)
  
    steps:
    - checkout: self
      submodules: true
  
    - task: CmdLine@2
      displayName: 'Dump Environment Variables'
      inputs:
        script: 'printenv'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore $(apiSolution)'
      inputs:
        command: 'restore'
        projects: '$(apiSolution)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build $(apiSolution) --configuration $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '$(apiSolution)'
        arguments: '-- configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Run ALL Tests and Collect Code Coverage"
      inputs:
        command: 'test'
        projects: '$(apiSolutionRoot)\**\*Tests\*.csproj'
        arguments: '--verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Install Custom Tool: ReportGenerator Tool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

    - task: CmdLine@2
      displayName: 'Create Reports'
      inputs:
        script: 'reportgenerator -reports:$(apiSolutionRoot)\**\coverage.cobertura.xml -targetdir:$(apiSolutionRoot)\CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges" -sourcedir:$(apiSolutionRoot)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish API Code Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(apiSolutionRoot)\**\coverage.cobertura.xml'
        reportDirectory: '$(apiSolutionRoot)\CoverageReport'
    
    - task: DotNetCoreCLI@2
      displayName: 'Stage API Build Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(apiProject)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)\api'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Artifacts: api-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'api-drop'
        publishLocation: 'pipeline'

- stage: BuildTestStageWebApp
  displayName: 'WEBAPP: Build, Test and Stage'
  dependsOn: []

  jobs:
  - job: BuildWebApp
    displayName: "Build, Test and Stage Web App"
    dependsOn: []

    pool:
      vmImage: $(webappBuildVMImage)

    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        yarn install
        yarn build
      displayName: 'Yarn install and build'
      workingDirectory: $(webAppSolutionRoot)

    - task: CopyFiles@2
      inputs:
      sourceFolder: $(webAppBuildDestination) # Optional
      #contents: '**' 
      targetFolder: '$(Build.ArtifactStagingDirectory)/webapp'
      #cleanTargetFolder: false # Optional
      #overWrite: false # Optional
      #flattenFolders: false # Optional
      #preserveTimestamp: false # Optional

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(webAppBuildDestination)
        includeRootFolder: false 
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' 
        #replaceExistingArchive: true 
        #verbose: # Optional
        #quiet: # Optional

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Web App Artifacts - web-app-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'web-app-drop'
        publishLocation: 'pipeline'


  



# steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
